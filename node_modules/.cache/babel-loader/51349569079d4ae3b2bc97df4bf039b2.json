{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rival\\\\Documents\\\\code\\\\proyek frontend\\\\project\\\\src\\\\component\\\\uploads\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport BaseService from '../../services/baseService';\nimport API from '../../config/rest';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst uploadFile = () => {\n  _s();\n\n  const [file, setFile] = useState('');\n  const [data, getFile] = useState({\n    path: \"\",\n    data: \"\"\n  });\n  const [progress, setProgress] = useState(0);\n  const el = useRef();\n\n  const handleChange = e => {\n    setProgress(0);\n    const file = e.target.files[0];\n    console.log(file);\n    setFile(file);\n  };\n\n  const uploadFile = () => {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    BaseService.post(API.UPLOAD, formData, {\n      onUploadProgress: ProgressEvent => {\n        let progress = Math.round(ProgressEvent.loaded / ProgressEvent.total * 100) + '%';\n        setProgress(progress);\n      }\n    }).then(res => {\n      console.log(res);\n      getFile({\n        path: res.data.path,\n        data: res.data.data\n      });\n    }).catch(err => console.log(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file\",\n        name: \"file\",\n        accept: \"application/pdf\",\n        required: true,\n        ref: el,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressBar\",\n        style: {\n          width: progress\n        },\n        children: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadFile,\n        className: \"upbutton\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(uploadFile, \"lR/CRFrl/mymMd9rVYmuzHNvDBc=\");\n\nexport default uploadFile; // export default class UploadFile extends Component {\n//     constructor(props){\n//         super(props);\n//         this.selectFile = this.selectFile.bind(this);\n//         this.upload = this.upload.bind(this);\n//         this.state = {\n//             selectFile: undefined,\n//             currentFile: undefined,\n//             progress: 0,\n//             message: \"\",\n//             fileInfos: [],\n//         }; \n//     }\n//     componentDidMount() {\n//         uploads.getFiles().then((res) => {\n//             this.setState({\n//                 fileInfos: res.data,\n//             });\n//         });\n//     }\n//     selectFile(event) {\n//         this.setState({\n//             selectedFile: event.target.files,\n//         });\n//     }\n//     upload() {\n//         let currentFile = this.state.selectedFile[0];\n//         this.setState({\n//             progress: 0,\n//             currentFile: currentFile,\n//         });\n//         uploads.upload(currentFile, (event) => {\n//             this.setState({\n//                 progress: Math.round((100 * event.loaded) / event.total),\n//             });\n//         })\n//         .then((res) => {\n//             this.setState({\n//                 message: res.data.message,\n//             });\n//             return uploads.getFiles();\n//         })\n//         .then((files) => {\n//             this.setState({\n//                 fileInfos: files.data,\n//             });\n//         })\n//         .catch(() => {\n//             this.setState({\n//                 progress: 0,\n//                 message: \"Could not upload the file!\",\n//                 currentFile: undefined,\n//             });\n//         });\n//         this.setState({\n//             selectedFile: undefined,\n//         });\n//     }\n//     render() {\n//         const {\n//             selectedFile,\n//             currentFile,\n//             progress,\n//             message,\n//         } = this.state;\n//         return (\n//             <div>\n//                 <label>Upload PDF Document</label>\n//                 <br></br>\n//                 {currentFile && (\n//                     <div className=\"progress\">\n//                         <div\n//                         className=\"progress-bar progress-bar-info progress-bar-striped\"\n//                         role=\"progressbar\"\n//                         aria-valuenow={progress}\n//                         aria-valuemin=\"0\"\n//                         aria-valuemax=\"100\"\n//                         style={{ width: progress + \"%\" }}\n//                         >\n//                         {progress}%\n//                         </div>\n//                     </div>\n//                 )}\n//                 <label className=\"btn btn-default\">\n//                     <input type=\"file\" id=\"file\" name=\"file\" accept=\"application/pdf\" required onChange={this.selectFile}></input>\n//                 </label>\n//                 <button className=\"btn btn-success\" disabled={!selectedFile} onClick={this.upload}>Upload</button>\n//                 <div className=\"alert alert-light\" role=\"alert\">\n//                     {message}\n//                 </div>\n//             </div>\n//         )\n//     }\n// }","map":{"version":3,"sources":["C:/Users/rival/Documents/code/proyek frontend/project/src/component/uploads/index.js"],"names":["React","useRef","useState","BaseService","API","uploadFile","file","setFile","data","getFile","path","progress","setProgress","el","handleChange","e","target","files","console","log","formData","FormData","append","post","UPLOAD","onUploadProgress","ProgressEvent","Math","round","loaded","total","then","res","catch","err","width"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport BaseService from '../../services/baseService';\r\nimport API from '../../config/rest';\r\nimport './style.css'\r\n\r\nconst uploadFile = () => {\r\n    const [file, setFile] = useState('');\r\n    const [data, getFile] = useState({ path: \"\", data: \"\"});\r\n    const [progress, setProgress] = useState(0);\r\n    const el = useRef();\r\n\r\n    const handleChange = (e) => {\r\n        setProgress(0)\r\n        const file = e.target.files[0];\r\n        console.log(file);\r\n        setFile(file);\r\n    }\r\n\r\n    const uploadFile = () => {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        BaseService.post(API.UPLOAD, formData, {\r\n            onUploadProgress: (ProgressEvent) => {\r\n                let progress = Math.round(\r\n                    ProgressEvent.loaded / ProgressEvent.total * 100) + '%';\r\n                setProgress(progress);\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            getFile({\r\n                path: res.data.path,\r\n                data: res.data.data\r\n            })\r\n        }).catch(err => console.log(err))   \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"file-upload\">\r\n                <input type=\"file\" id=\"file\" name=\"file\" accept=\"application/pdf\" required ref={el} onChange={handleChange} />\r\n                <div className=\"progressBar\" style={{ width: progress }}>\r\n                    {progress}\r\n                </div>\r\n                <button onClick={uploadFile} className=\"upbutton\">Upload</button>\r\n                <hr />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default uploadFile;\r\n\r\n// export default class UploadFile extends Component {\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.selectFile = this.selectFile.bind(this);\r\n//         this.upload = this.upload.bind(this);\r\n\r\n//         this.state = {\r\n//             selectFile: undefined,\r\n//             currentFile: undefined,\r\n//             progress: 0,\r\n//             message: \"\",\r\n\r\n//             fileInfos: [],\r\n//         }; \r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         uploads.getFiles().then((res) => {\r\n//             this.setState({\r\n//                 fileInfos: res.data,\r\n//             });\r\n//         });\r\n//     }\r\n\r\n//     selectFile(event) {\r\n//         this.setState({\r\n//             selectedFile: event.target.files,\r\n//         });\r\n//     }\r\n\r\n//     upload() {\r\n//         let currentFile = this.state.selectedFile[0];\r\n\r\n//         this.setState({\r\n//             progress: 0,\r\n//             currentFile: currentFile,\r\n//         });\r\n\r\n//         uploads.upload(currentFile, (event) => {\r\n//             this.setState({\r\n//                 progress: Math.round((100 * event.loaded) / event.total),\r\n//             });\r\n//         })\r\n//         .then((res) => {\r\n//             this.setState({\r\n//                 message: res.data.message,\r\n//             });\r\n//             return uploads.getFiles();\r\n//         })\r\n//         .then((files) => {\r\n//             this.setState({\r\n//                 fileInfos: files.data,\r\n//             });\r\n//         })\r\n//         .catch(() => {\r\n//             this.setState({\r\n//                 progress: 0,\r\n//                 message: \"Could not upload the file!\",\r\n//                 currentFile: undefined,\r\n//             });\r\n//         });\r\n\r\n//         this.setState({\r\n//             selectedFile: undefined,\r\n//         });\r\n//     }\r\n//     render() {\r\n//         const {\r\n//             selectedFile,\r\n//             currentFile,\r\n//             progress,\r\n//             message,\r\n//         } = this.state;\r\n\r\n//         return (\r\n//             <div>\r\n//                 <label>Upload PDF Document</label>\r\n//                 <br></br>\r\n//                 {currentFile && (\r\n//                     <div className=\"progress\">\r\n//                         <div\r\n//                         className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n//                         role=\"progressbar\"\r\n//                         aria-valuenow={progress}\r\n//                         aria-valuemin=\"0\"\r\n//                         aria-valuemax=\"100\"\r\n//                         style={{ width: progress + \"%\" }}\r\n//                         >\r\n//                         {progress}%\r\n//                         </div>\r\n//                     </div>\r\n//                 )}\r\n\r\n//                 <label className=\"btn btn-default\">\r\n//                     <input type=\"file\" id=\"file\" name=\"file\" accept=\"application/pdf\" required onChange={this.selectFile}></input>\r\n//                 </label>\r\n//                 <button className=\"btn btn-success\" disabled={!selectedFile} onClick={this.upload}>Upload</button>\r\n//                 <div className=\"alert alert-light\" role=\"alert\">\r\n//                     {message}\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}